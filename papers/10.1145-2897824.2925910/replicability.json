[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Resolving Fluid Boundary Layers with Particle Strength Exchange and Weak Adaptivity",
        "DOI": "10.1145/2897824.2925910",
        "Year": 2016,
        "ACM Keywords": [
            "Physical simulation",
            "Partial differential equations"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Animation and Simulation",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://www.cs.ubc.ca/~rbridson/docs/zhang-siggraph2016-whirp_vflip.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/zhxx1987/IVOCK",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "c3c2079787b095379a5510dc24ef5000eb37a287",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:rev:c3c2079787b095379a5510dc24ef5000eb37a287;origin=https://github.com/zhxx1987/IVOCK/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "GPL",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "IDE Project (VS,..)",
        "Dependencies": "TBB / glew",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 0,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 3,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 3,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 4,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The code comes with a solver, a particle simulator and a particle renderer that renders the simulation. Compiling the code required a number of steps (under Visual Studio 2017):\n* for the TBB_Multigrid project, you need to set the TBBROOT environment variable to your TBB path.\n\n* for the Smoke_Solver project:\n- in Smoke_Solver.vcxproj, the tbb props file should be updated to mach your TBB_Multigrid path (since the props file is shipped) and some paths that are hardcoded (e.g., C:\\Users\\xinxin\\Dropbox\\xinxin_code\\TBB_Multigrid\\TBB_Multigrid ) should be updated.\n- same process for particle_renderer.vcproj.xinxin-PC.xinxin\n- in TBB_SETTINGS.props, change glew64 to glew32 (?)\n- the projects can then be loaded (and possibly retargeted) in Visual Studio.\n\n- In util.h of both Smoke_Solver and particle_renderer projects, you need to comment out the function lround line 197--203\n- You should add the path to the libraries for glew (and use glew32 instead of glew64 ?),  freeglut and tbb\n\n- to read the resulting sgi files, you can download the sgi plugin for photoshop (put the plugin in C:\\Program Files\\Adobe\\Adobe Photoshop CC 2019\\Plug-ins and restard photoshop)\n\nUltimately, the simulation runs smoothly and produces files that consist in the particles for each time frame.\nThe renderer is not documented and hard to play with. Using wrong values can lead to extreme times (I had a rendering compute for 67 hours and resulting in a constant blueish image ; some renderings just crash using a wrong \"quality_factor\" value which makes gigantic shadow maps...). Using the following values worked well:\n.\\particle_renderer.exe [path to frames] 0.01 0.01 0.1 10 10 10 10 150 180\n(where here 150--180 renders frames from 150 to 180).",
        "Misc. comments": "",
        "Software language": "C/C++"
    }
]