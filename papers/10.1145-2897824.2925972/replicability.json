[
    {
        "Variant name": "main",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Learning to Simplify: Fully Convolutional Networks for Rough Sketch Cleanup",
        "DOI": "10.1145/2897824.2925972",
        "Year": 2016,
        "ACM Keywords": [
            "Fine arts",
            "Neural networks"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://www.f.waseda.jp/hfs/SimoSerraSIGGRAPH2016.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "https://esslab.jp/~ess/en/research/sketch/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/bobbens/sketch_simplification",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "0bc912cd8409274f70bd1403a0956fd9b9968ea6",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:dir:893e0a8908a4178b3f032e7c9e53b6a54971fd1f;origin=https://github.com/bobbens/sketch_simplification/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "SOFTWARE LICENSE AGREEMENT ACADEMIC OR NON-PROFIT ORGANIZATION NONCOMMERCIAL RESEARCH USE ONLY",
        "Are the code authors explicit? (boolean)": true,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "pytorch0.4.1/torchvision0.2.0/pillow",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": true,
        "Nature of the data (pretrained model, LUT...)": "Training data",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 4,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 4,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 3,
        "Operating system for the test": "Linux",
        "Build instructions/comments": "The provided code implements both a 2018 paper and the 2016 paper. To be sure to run the 2016 paper, on line 10 replace model_gan.t7 by model_mse.t7 to load the provided pre-trained model . Not all figures input are given (the figs.sh script is for the 2018 paper) but the test.png corresponds to one of the example in Fig. 01. My result was more blurry than the one in the paper, and so were the results with other test images I could run.",
        "Misc. comments": "",
        "Software language": "Python"
    }
]