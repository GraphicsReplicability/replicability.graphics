[
    {
        "Variant name": "main",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr> ",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Operating system for the test": "Ubuntu 20.04",
        "Title": "Silly rubber: an implicit material point method for simulating non-equilibrated viscoelastic and elastoplastic solids",
        "DOI": "10.1145/3306346.3322968",
        "Year": 2019,
        "ACM Keywords": [
            "Physical simulation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Animation and Simulation",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "PDF URL": "https://www.seas.upenn.edu/~cffjiang/research/fang2019visco/fang2019visco.pdf",
        "Project URL": "",
        "Code available (boolean)": true,
        "Code URL": "https://github.com/penn-graphics-research/ziran2019",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number": "8d3d27cd17bbceab18c317820dbe595178f6312a",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:dir:0bca7744a7dff8d83093fa013e99d7086cfdf8f3;origin=https://github.com/penn-graphics-research/ziran2019;visit=swh:1:snp:60d230fd23a15f9241785ee90478bf9722d99dac;anchor=swh:1:rev:8d3d27cd17bbceab18c317820dbe595178f6312a;path=//",
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": 0,
        "Software type {Code, Binary, Partial Code}": "Code",
        "Software language": "C++",
        "Code License (if any)": "",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "CMake/Make",
        "Dependencies": "eigen3, gfortran, libmetis, libopenvdb, libboost, libilmbase, libtbb2, libz, clang-format",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 0,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 3,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 5,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 1,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 4,
        "Build instructions/comments": "To make it compile, I removed the -Werror=all . In Lib/MPM/MpmSimulationBase.cpp, I replaced all lines \"if constexpr (!USE_APIC_BLEND_RPIC)\" with \"if (!USE_APIC_BLEND_RPIC)\"; \"if constexpr (USE_APIC_BLEND_RPIC)\" with \"if (USE_APIC_BLEND_RPIC)\"; \"if constexpr (!USE_MPM_DEGREE_ONE)\" with \"if (!USE_MPM_DEGREE_ONE)\".",
        "Misc. comments": "The code corresponds to two siggraph 2019 papers. It is not explicit which code corresponds to which paper, I assumed \"admm\" project corresponds to this paper, while \"fracture\" corresponds to \"CD-MPM: Continuum Damage Material Point Methods for Dynamic Fracture Animation\". I could reproduce the twisted bar and car crash experiments. I visualized the bgeo files with the partview tool available here: \"https://github.com/wdas/partio\", it can also be done using Houdini. To know which test number corresponds to which experiment, refer to the AdmmInit3D.h file."
    },
    {
        "Variant name": "Ubuntu 18.04",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr> ",
        "Is master variant (boolean)": false,
        "Is variant deprecated (boolean)": false,
        "Operating system for the test": "Ubuntu 18.04",
        "Title": "Silly rubber: an implicit material point method for simulating non-equilibrated viscoelastic and elastoplastic solids",
        "DOI": "10.1145/3306346.3322968",
        "Year": 2019,
        "ACM Keywords": [
            "Physical simulation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Animation and Simulation",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "PDF URL": "https://www.seas.upenn.edu/~cffjiang/research/fang2019visco/fang2019visco.pdf",
        "Project URL": "",
        "Code available (boolean)": true,
        "Code URL": "https://github.com/penn-graphics-research/ziran2019",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number": "8d3d27cd17bbceab18c317820dbe595178f6312a",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:dir:0bca7744a7dff8d83093fa013e99d7086cfdf8f3;origin=https://github.com/penn-graphics-research/ziran2019;visit=swh:1:snp:60d230fd23a15f9241785ee90478bf9722d99dac;anchor=swh:1:rev:8d3d27cd17bbceab18c317820dbe595178f6312a;path=//",
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": 0,
        "Software type {Code, Binary, Partial Code}": "Code",
        "Software language": "C++",
        "Code License (if any)": "",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "CMake/Make",
        "Dependencies": "eigen3, gfortran, libmetis, libopenvdb, libboost, libilmbase, libtbb2, libz, clang-format",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 0,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 1,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 3,
        "Build instructions/comments": "The code compules out of the box",
        "Misc. comments": "The code corresponds to two siggraph 2019 papers. It is not explicit which code corresponds to which paper, I assumed \"admm\" project corresponds to this paper, while \"fracture\" corresponds to \"CD-MPM: Continuum Damage Material Point Methods for Dynamic Fracture Animation\". I could reproduce the twisted bar and car crash experiments. I visualized the bgeo files with the partview tool available here: \"https://github.com/wdas/partio\", it can also be done using Houdini.  To know which test number corresponds to which experiment, refer to the AdmmInit3D.h file."
    }
]