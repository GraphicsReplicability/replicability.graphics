[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Mellado <nmellado0@gmail.com>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Terrain-Adaptive Locomotion Skills Using Deep Reinforcement Learning",
        "DOI": "10.1145/2897824.2925881",
        "Year": 2016,
        "ACM Keywords": [
            "Physical simulation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Animation and Simulation",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://www.cs.ubc.ca/~van/papers/2016-TOG-deepRL/2016-TOG-deepRL.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "https://www.cs.ubc.ca/~van/papers/2016-TOG-deepRL/index.html",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/xbpeng/DeepTerrainRL",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "ed82e2ebe5f14fa875cc3d0a2180c64980408e8f",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:dir:69bbf02061f306120950c13095ecc81cd231bab3;origin=https://github.com/xbpeng/DeepTerrainRL/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "LGPL",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "premake",
        "Dependencies": "caffe/boost/opencv/eigen/BulletPhysics/CUDA/Json_cpp/bits/glut/lodepng/",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": false,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 0,
        "Dependencies score {0=NA, 1,2,3,4,5}": 1,
        "Build/configure score {0=NA, 1,2,3,4,5}": 1,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 1,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 1,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 1,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 10,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The provided code comes with many dependencies, which are supposedly handled using premake4.\n\nOn windows, I could generate a solution for Visual Studio by calling premake.exe vs2012 from the source code directory (call to more recent versions of VS did not work). I couldn't build the solution, as premake didn't populate the include, build and link directives for the dependencies. I tried to fix it, but I couldn't find a way to properly handle caffe and its dependencies.\n\nI got similar problems on linux, where I could generate a Makefile by calling premake gmake, but I had too many dependencies to fix when calling  make config=debug64.",
        "Misc. comments": "",
        "Software language": "C/C++"
    }
]