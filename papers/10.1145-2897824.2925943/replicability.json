[
    {
        "Variant name": "main",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Multiple-Scattering Microfacet BSDFs with the Smith Model",
        "DOI": "10.1145/2897824.2925943",
        "Year": 2016,
        "ACM Keywords": [
            "Reflectance modeling"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Rendering",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://drive.google.com/uc?id=0BzvWIdpUpRx_cFVlUkFhWXdleEU&export=download",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "https://eheitzresearch.wordpress.com/240-2/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://drive.google.com/file/d/0BzvWIdpUpRx_bTdXTEFfaWlQRUE/view",
        "Code URL2": "",
        "MD5 sum (for archives)": "95098881a717e42545e352c9a3e17b13",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "None",
        "Dependencies": "glm",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 2,
        "Dependencies score {0=NA, 1,2,3,4,5}": 0,
        "Build/configure score {0=NA, 1,2,3,4,5}": 4,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 4,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 3,
        "Operating system for the test": "Linux",
        "Build instructions/comments": "The authors provide both a mitsuba plugin and a tutorial implementation source code. \n\nFor the mitsuba plugin, by adding the .cpp and .h to mitsuba/src/bsdfs folder and adding lines:\nplugins += env.SharedLibrary('roughconductorGGX', ['roughconductorGGX.cpp'])\nplugins += env.SharedLibrary('roughdiffuseGGX', ['roughdiffuseGGX.cpp'])\nplugins += env.SharedLibrary('roughdielectricGGX', ['roughdielectricGGX.cpp']) \nto mitsuba/src/bsdfs/SConscript , everything compiles well. The examples work after using the mitsuba gui to convert the scenes from version 0.5 to 0.6. However the examples are not the same as in the paper (but they do loook similar).\n\nThe tutorial code consists in a C++ class (with a very precise and clear technical documentation) but no example is given. The code looks fine but I was not able to produce some results with the tutorials.",
        "Misc. comments": "",
        "Software language": "C/C++"
    }
]