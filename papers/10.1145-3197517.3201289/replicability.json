[
    {
        "Variant name": "main",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Efficient rendering of layered materials using an atomic decomposition with statistical operators",
        "DOI": "10.1145/3197517.3201289",
        "Year": 2018,
        "ACM Keywords": [
            "Reflectance modeling"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Rendering",
        "Co-authors from academia (boolean)": false,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://hal.archives-ouvertes.fr/hal-01785457/document",
        "PDF on Arxiv or any openarchive initiatives (boolean)": true,
        "Arxiv/OAI page URL": "https://hal.archives-ouvertes.fr/hal-01785457/",
        "Project URL": "https://belcour.github.io/blog/research/2018/05/05/brdf-realtime-layered.html",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://hal.archives-ouvertes.fr/hal-01785457v3/file/suppl.zip",
        "Code URL2": "",
        "MD5 sum (for archives)": "d446ab4042daf81b0c903d877a0f6362",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Commandline instructions in README",
        "Dependencies": "mitsuba",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 3,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 3,
        "Operating system for the test": "Linux",
        "Build instructions/comments": "Many webgl demo are provided to validate many steps or approximation of the paper.\n The mitsuba plugin works well by carefully following the steps described in the readme and with an already working version of mitsuba. Scripts for reproducing figs 12 and 13 are provided.\nEasy to find/install dependencies: 2 because installing mitsuba on linux requires several changes on ubuntu 19.10.\n** In config.py I changed -std=c++11 into -std=gnu++11 ;\n** In mitsuba/build/release/mtsgui I changed QtCore, QtOpenGL (and so on) into Qt5Core, Qt5OpenGL (and so on)\n** in data/scons/qt5.py,line 392 changed QtCore into Qt5Core.",
        "Misc. comments": "",
        "Software language": "C/C++, Shader language"
    }
]