[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Dynamic Ray Stream Traversal",
        "DOI": "10.1145/2601097.2601222",
        "Year": 2014,
        "ACM Keywords": [
            "Ray tracing",
            "Texturing"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Rendering",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://cseweb.ucsd.edu/~ravir/274/15/papers/drst.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "http://fileadmin.cs.lth.se/graphics/research/papers/2014/drst/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://code.google.com/archive/p/drst/source/default/source",
        "Code URL2": "",
        "MD5 sum (for archives)": "E56FEDE6A1829BC10138DE6DB91B2848",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "Intel Corporation",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "IDE Project (VS,..)",
        "Dependencies": "embree",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 5,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 3,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 2,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The code was easy to run on Windows with VS2017. I only needed to upgrade the solution and retarget the project. I do not have the required Intel C++ Compiler XE 14.0, but the code compiled directly when changing the Intel C++ compiler target to Visual Studio 2017 (Configuration properties -> General -> Platform Toolset), probably at the expense of slower runtimes.\nI managed to get the crown to run at about 12 down to 8 Mrays/s as time passes, using BVH4, on a 2017 laptop with a 4-core Intel Core i7-7700 HQ @ 2.8GHz (the paper gives 10Mrays/s in 2014 for this scene on a lower end laptop with \"a 4-core Intel Haswell Core i7-4750HQ CPU clocked at 2.0 GHz and with a turbo frequency of 3.2 GHz\" but compiled with the Intel compiler).",
        "Misc. comments": "",
        "Software language": "C/C++"
    }
]