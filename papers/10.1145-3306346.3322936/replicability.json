[
    {
        "Variant name": " Ubuntu 20.04",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr> ",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Operating system for the test": "Ubuntu 20.04",
        "Title": "Accurate appearance preserving prefiltering for rendering displacement-mapped surfaces ",
        "DOI": "10.1145/3306346.3322936",
        "Year": 2019,
        "ACM Keywords": [
            " Rendering "
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Rendering",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": true,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "PDF URL": "http://cseweb.ucsd.edu/~liw086/multires-surface-s19/multires.pdf",
        "Project URL": "",
        "Code available (boolean)": true,
        "Code URL": "http://cseweb.ucsd.edu/~liw086/multires-surface-s19/prefilter_disp_map.zip",
        "Code URL2": "",
        "MD5 sum (for archives)": "75409ed3ebace219a5593fb8213a2e1d",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": 0,
        "Software type {Code, Binary, Partial Code}": "Code",
        "Software language": "C++,python",
        "Code License (if any)": "GPL3",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "scons",
        "Dependencies": "build-essential, scons, mercurial, qt4-dev-tools, libpng12-dev, libjpeg-dev, libilmbase-dev, libxerces-c-dev, libboost-all-dev, libopenexr-dev, libglewmx-dev, libxxf86vm-dev, libpcrecpp0, libeigen3-devlibfftw3-dev, libglew-mx, python3 (scipy, numpy, opencv)",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 2,
        "Dependencies score {0=NA, 1,2,3,4,5}": 0,
        "Build/configure score {0=NA, 1,2,3,4,5}": 2,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 2,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 1,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 6,
        "Build instructions/comments": "Several changes have to be made for it to compile on linux (command line only). To build (once you've fixed all files, see below) go to the mitsuba folder and \"cp build/config-linux-gcc.py  config.py\"  then run scons.\n Install mitsuba required dependencies (see above)\n Required code changes: \n * mitsuba/include/mitsuba/core/tls.h : add #include \"../../../dependencies/include/GL/glew.h\" \n * mitsuba/src/shapes/shellmap_heightfield.cpp :\n line 376 cast p.z into (double)p.z\n * mitsuba/src/utils/precomp/bsdfSimulator_proc.cpp:\n line 106: cast normal.z into (double)normal.z;\n line 113:  cast dot(normal, m_wi)) into (double)dot(normal, m_wi))\n * mitsuba/src/utils/precomp/effBrdfEstimator.cpp :\n line 133: change Float w into double w ; line;\n line 225: cast normal.z into (double)normal.z;\n line 232:  cast dot(normal, m_wi)) into (double)dot(normal, m_wi))\n * mitsuba/src/utils/precomp/normalMipmap.cpp:\n lines 223 and 286 replace kappa by (double)kappa\n * mitsuba/src/utils/precomp/multi_vmf.h change Float(rand()) / Float(RAND_MAX) into  (double)(Float(rand()) / Float(RAND_MAX))\n Then go to data/render_twill/ and run LD_LIBRARY_PATH=../../mitsuba/dist/ ../../mitsuba/dist/mitsuba env_shellmap_1.xml (for example)\n For running the python script, in mitsuba/build/SConscript.configure, make your python version (3.8 in my case) you're running is listed in python_versions line 34 and in data/scons/detect_python do the same on line 60 and add 'boost_python%s' % version to the base paths line 45.\n In file prefilter_twill.py: lines 39 and 79 replace slashes by backslashes (but not the escaping-slashes)\n Finally do not forget to source setpath.sh after setting MITSUBA_PYVER to your python version number",
        "Misc. comments": ""
    }
]