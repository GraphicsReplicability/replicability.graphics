[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Binary continuous image decomposition for multi-view display",
        "DOI": "10.1145/2897824.2925949",
        "Year": 2016,
        "ACM Keywords": [
            "Image processing"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Virtual Reality",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": true,
        "PDF on the authors' webpage / institution (boolean)": false,
        "PDF URL": "https://dl.acm.org/doi/pdf/10.1145/2897824.2925949?download=true",
        "PDF on Arxiv or any openarchive initiatives (boolean)": true,
        "Arxiv/OAI page URL": "",
        "Project URL": "http://navi.cs.kumamoto-u.ac.jp/~koutaki/projects/BCID/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "http://navi.cs.kumamoto-u.ac.jp/~koutaki/projects/BCID/Supplementaly.zip",
        "Code URL2": "http://navi.cs.kumamoto-u.ac.jp/~koutaki/projects/BCID/winbin.zip",
        "MD5 sum (for archives)": "0E7D8F934B88C46EB95A8C4294552AE6",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "None",
        "Dependencies": "fftw / opencv",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 5,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 1,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "Although no makefiles nor build instructions are given, it is quite straightforward to compile -- in my case creating a Visual Studio 2017 solution, putting all files, and setting include an library paths for FFTW and OpenCV. Requires OpenCV libraries are opencv_imgproc412.lib;opencv_highgui412.lib;opencv_imgcodecs412.lib;opencv_core412.lib.\nTo prevent a (known) opencv issue relating to 'ACCESS_MASK' being an ambiguous symbol in winnt.h, I had to #include <Windows.h> at the very first line of main.cpp.\nTo activate OpenMP, in addition to addin openmp support in the visual studio configurations, you need to specify the preprocessor definition _OPENMP.\nIn addition to the code, a compiled version (for Windows) is also provided. Both the code and the provided executable produce the same result on the given examples (those of Fig 8 and 6), and they correspond to the results shown in the paper. The archive containing the compiled files also contain batch files which are useful to see which parameters were used to produce the results (number of bits, iterations, etc.).\nAdditional instructions on the hardware side are provided in a pdf document in the same folder as the code in supplementary materials.",
        "Misc. comments": "",
        "Software language": "C/C++"
    }
]