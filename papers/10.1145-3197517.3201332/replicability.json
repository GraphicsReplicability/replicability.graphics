[
    {
        "Variant name": "main",
        "Reviewer name": "David Coeurjolly <david.coeurjolly@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Neural best-buddies: sparse cross-domain correspondence",
        "DOI": "10.1145/3197517.3201332",
        "Year": 2018,
        "ACM Keywords": [
            "Interest point and salient region detections",
            "Matching",
            "Image manipulation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": false,
        "PDF URL": "https://arxiv.org/pdf/1805.04140.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": true,
        "Arxiv/OAI page URL": "https://arxiv.org/abs/1805.04140",
        "Project URL": "https://kfiraberman.github.io/neural_best_buddies/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/kfiraberman/neural_best_buddies",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "8121bb9b084026fc8dd097899f66e632c0f2fde3",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:dir:86bd6f8f1079ad60499600dccdea9e0099e5db2b;origin=https://github.com/kfiraberman/neural_best_buddies/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "CUDA / CuDNN / sklearn / numpy / torchvision / matplotlib",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 4,
        "Build/configure score {0=NA, 1,2,3,4,5}": 4,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 5,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 2,
        "Operating system for the test": "Linux",
        "Build instructions/comments": "sklearn dependency was not explicitly mentioned in the README. To make the code working on recent pytorch, I needed to update in line of code :\n\n\n@@ -92,7 +92,7 @@ class vgg19(nn.Module):\n             deconvolved_feature_forward = self.forward(level=src_level, start_level=dst_level, set_as_var = False)\n             loss_perceptual = criterionPerceptual(deconvolved_feature_forward, src_layer)\n             loss_perceptual.backward()\n-            error = loss_perceptual.data[0]\n+            error = loss_perceptual.item()\n             self.update_last_losses(error)\n             if (i % 3 == 0) and (print_errors == True):\n                 print(\"error: \", error)",
        "Misc. comments": "",
        "Software language": "Python"
    }
]