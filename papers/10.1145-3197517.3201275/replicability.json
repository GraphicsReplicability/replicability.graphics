[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Semantic soft segmentation",
        "DOI": "10.1145/3197517.3201275",
        "Year": 2018,
        "ACM Keywords": [
            "Image segmentation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": false,
        "PDF URL": "http://yaksoy.github.io/papers/TOG18-sss.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "http://yaksoy.github.io/sss/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/yaksoy/SemanticSoftSegmentation",
        "Code URL2": "https://github.com/iyah4888/SIGGRAPH18SSS",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "fb89f498ebdefa19f5f5fc4a639a9ff190ac09e5",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "4d8a9e2c99a055e8b66a61665594112a69ab526f",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:rev:fb89f498ebdefa19f5f5fc4a639a9ff190ac09e5;origin=https://github.com/yaksoy/SemanticSoftSegmentation/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "custom",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Other script, Not applicable (python, Matlab..)",
        "Dependencies": "ImageGraphs / TensorFlow",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": true,
        "Nature of the data (pretrained model, LUT...)": "Pre-trained models / Hardcoded data / lookup tables /...",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 2,
        "Dependencies score {0=NA, 1,2,3,4,5}": 2,
        "Build/configure score {0=NA, 1,2,3,4,5}": 2,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 4,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 10,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The code is split in two parts, in two different projects. The second project is trivial to run in matlab without hassle, takes an input image that consists in standard RGB colors for the first half, and the second half should contain features. \nThe first project of the code, which is supposed to generate features is much more difficult to run. It depends on TensorFlow 1.4 (while the readme indicates TensorFlow >= 1.4, it in fact only works with TensorFlow = 1.4). This old TensorFlow does not support Python 3.7, so I had to remove my 3.7 to install a 3.6 (which cannot be installed via Anaconda -- Anaconda spent an entire night trying to downgrade 3.7 to 3.6 but this didn't work). Finally, when the code runs, it outputs a matlab file which contains 128 features. This file should be processed with preprocessFeatures, along with the original image, in the second project.\nThe process is not documented, but can be understood from the context. In general, while it was relatively painful to run, results seem to be reproducible. It would however have been much less painful if I had a Python 3.6 already installed.\nThe lower replicability score is explained by the fact no code is provided for training and only the pre-trained model is given.",
        "Misc. comments": "",
        "Software language": "Python, Matlab / Mathematica / .."
    }
]