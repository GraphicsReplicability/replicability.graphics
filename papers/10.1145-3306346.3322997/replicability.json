[
    {
        "Variant name": "Ubuntu 20.04",
        "Reviewer name": "Julie Digne <julie.digne@liris.cnrs.fr> ",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Operating system for the test": "Ubuntu 20.04",
        "Title": "Affine interpolation in a lie group framework",
        "DOI": "10.1145/3306346.3322997",
        "Year": 2019,
        "ACM Keywords": [
            "Animation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Animation and Simulation",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": false,
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "PDF URL": "",
        "Project URL": "",
        "Code available (boolean)": true,
        "Code URL": "https://github.com/sumukhbansal/AffineInterpolation",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number": "7f34e82709cca1b01c195671eaff67db2c4ef5ff",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": 0,
        "Software type {Code, Binary, Partial Code}": "Code",
        "Software language": "Matlab",
        "Code License (if any)": "",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "",
        "Dependencies": "matlab/communication toolbox",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 0,
        "Build/configure score {0=NA, 1,2,3,4,5}": 0,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 2,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 0,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 2,
        "Build instructions/comments": "The code needs vec2mat from the communication toolbox. Since I don't have this toolbox, I used the following script:\n function [ mat, npadded ] = vec2mat( vec, N )\n v = vec(:);\n nelem = size(v,1);\n nrows = ceil(nelem/N);\n npadded = nrows*N - nelem;\n newv = [v; zeros(npadded,1)];\n mat=reshape(newv,N, nrows)'; \n end\n. The program worked but created unexpected complex values and the patch function could not run, for the example given in the readme. For the same example but replacing the translation by [1 1 1] gave me an interpolation result which does  not look plausible and it appears that the created variables have a lot of NaN values (I had a warning that the matrix is singular to working precision, so that could explain it). Another reason could be my own implementation of vec2mat given above.",
        "Misc. comments": ""
    }
]