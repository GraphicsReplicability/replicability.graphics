[
    {
        "Variant name": "Windows 10",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Operating system for the test": "Windows",
        "Title": "Optimal Multiple Importance Sampling",
        "DOI": "10.1145/3306346.3323009",
        "Year": 2019,
        "ACM Keywords": [
            "Rendering",
            "Probability and statistics"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Rendering",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "PDF URL": "https://graphics.cg.uni-saarland.de/papers/konda-2019-siggraph-optimal-mis.pdf",
        "Project URL": "https://cgg.mff.cuni.cz/~jaroslav/papers/2019-optimal-mis/",
        "Code available (boolean)": true,
        "Code URL": "https://graphics.cg.uni-saarland.de/papers/konda-2019-siggraph-optimal-mis-supplemental.zip",
        "Code URL2": "https://cgg.mff.cuni.cz/~jaroslav/papers/2019-optimal-mis/2019-kondapaneni-optimal-mis-src.zip",
        "MD5 sum (for archives)": "9A8DDAF3293C39EED9A9CFE17EDE209D",
        "MD5 sum (for archives) URL2": "A77B372F34FB236A9FD59346AF2BFDCB",
        "git/hg/svn commit hash or revision number": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": 0,
        "Software type {Code, Binary, Partial Code}": "Code",
        "Software language": "C++",
        "Code License (if any)": "",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "",
        "Dependencies": "pbrt,eigen,glog,openexr,ptex,zlib",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 4,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 0,
        "Build instructions/comments": "There is no documentation to build and run the code, but it is quite easy anyway since it relies on PBRT. I pulled PBRT v3 (aaa552a4b9cbf9dccb71450f47b268e0ed6370e2) with recursive dependencies, replaced PBRT files with those provided in supplementary materials, ran CMake (worked directly), and added integrators/optmis.cpp and core/guiding.cpp in imgtool, bsdftest, pbrt_test, and pbrt_exe Visual Studio projects (you may as well edit the CMakeLists.txt). Compiling worked directly. Example scenes with pbrt scripts already set up to run the proposed MIS strategy are given in supplementary materials, for instance in supplemental/results/dining-room/scene (run pbrt.exe dining-room.pbrt as usual). It produces results comparable to those advertised. \n\nAdditional scripts to reproduce plots (some rely on Mathematica, others on Matlab ; I did not evaluate them) and to compare image results from different methods are provided.",
        "Misc. comments": ""
    }
]