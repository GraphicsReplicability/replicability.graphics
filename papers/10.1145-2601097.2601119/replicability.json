[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "The Visual Microphone: Passive Recovery of Sound from Video",
        "DOI": "10.1145/2601097.2601119",
        "Year": 2014,
        "ACM Keywords": [
            "Scene understanding",
            "Video segmentation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": true,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://people.csail.mit.edu/mrub/papers/VisualMic_SIGGRAPH2014.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "http://people.csail.mit.edu/mrub/VisualMic/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "http://people.csail.mit.edu/abedavis/research/VisMic/VMSlim.zip",
        "Code URL2": "",
        "MD5 sum (for archives)": "05EF484CB2D16F8886F3DCE13187991B",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": true,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "matlab / pyrTools",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 1,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 3,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 4,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The code partially implements the paper, as there is no support for low-framerate videos by exploiting rolling shutter.\nFor the remaining high fps videos, some of them did not work at all as they resulted in errors (randomly either \"Unable to read the file.\" or \"Dot indexing is not supported for variables of this type (l. 275 of VideoReader/read)) which I could not debug, perhaps due to some codec issue. This was the case of Chips2-2200Hz-Mary_MIDI-input.avi,Chips1-2200Hz-Mary_Had-input.avi and Plant-2200Hz-Mary_MIDI-input.avi).\nI successfully ran the code on Chips1-20000Hz-Mary_Had-input.avi. The script (which loads a file 'crabchipsRamp.avi' which I did not find) needs to be adapted so that dsamplefactor = 1 instead of 0.1, otherwise the result is almost pure noise, and of course samplingrate = 20000. **Beware** as well that the default nscales = 1 while the paper's results were produced with nscales = 4 (page 4 in the paper), although I didn't hear much difference in the result.\nWith these settings, I managed to recover a sound in about 1.5 hours on a good laptop, but the sound is much noisier (though still impressive!) than the result shown in the accompanying webpage. The resulting spectrogram can be found here: https://pasteboard.co/ILOq404.png\nand the corresponding sound here: https://voca.ro/3qdSKf1zGkX\nThe webpage states that the output were further processed with \"speech enhancement audio denoising\" (the paper indicates [Loizou 2005]), though I could not find code for that algorithm.\nSince matlab R2015, wavwrite has been replaced by audiowrite.",
        "Misc. comments": "",
        "Software language": "Matlab / Mathematica / .."
    }
]