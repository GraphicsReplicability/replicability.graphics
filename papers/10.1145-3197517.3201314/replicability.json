[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Mellado <nmellado0@gmail.com>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "StrokeAggregator: consolidating raw sketches into artist-intended curve drawings",
        "DOI": "10.1145/3197517.3201314",
        "Year": 2018,
        "ACM Keywords": [
            "Image manipulation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://www.cs.ubc.ca/labs/imager/tr/2018/StrokeAggregator/StrokeAggregator_authorversion.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": true,
        "Arxiv/OAI page URL": "",
        "Project URL": "https://www.cs.ubc.ca/labs/imager/tr/2018/StrokeAggregator/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://www.cs.ubc.ca/labs/imager/tr/2018/StrokeAggregator/strokeaggregator_binary.zip",
        "Code URL2": "",
        "MD5 sum (for archives)": "a3b0a2742c4b9e060c76976538898bb7",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Binary",
        "Code License (if any)": "University of British Columbia Evaluation Software License",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "sip / pyqt4",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 3,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 3,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "For this paper, the authors provided precompiled executables implementing their approach with command line interface. On top of these tools, a graphical user interface is defined in Python to load the the input drawing, set the algorithm parameters, call the precompiled binaries, and display and save the results.\n\nThe precompiled binaries worked directly.\n\nI had a few difficulties to handle the dependencies of the python script. First, PyQt4 urls given in README.txt are wrong (correct url can be found here: https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4). Also, the documentation does not mention to install sip before PyQt4, while it seems to be a mandatory step (pip install sip).\n\nOnce this is all fixed, the program runs smoothly and all the results can be reproduced.\nThe application processes SCAP files, and converters (scap_to_svg and svg_to_scap) are provided. Core algorithms are provided as binaries, yet the software can be adapted in other context as long as the drawings can be stored as svg files.",
        "Misc. comments": "",
        "Software language": "Python, Cannot answer"
    }
]