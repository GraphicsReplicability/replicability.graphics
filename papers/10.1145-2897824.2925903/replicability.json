[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Entropic Metric Alignment for Correspondence Problems",
        "DOI": "10.1145/2897824.2925903",
        "Year": 2016,
        "ACM Keywords": [
            "Shape analysis"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Geometry",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://people.csail.mit.edu/jsolomon/assets/gw.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": true,
        "Arxiv/OAI page URL": "https://hal.archives-ouvertes.fr/hal-01305808",
        "Project URL": "",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/gpeyre/2016-SIGGRAPH-gw",
        "Code URL2": "https://people.csail.mit.edu/jsolomon/assets/gromovWassersteinDistance.m",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "1408f9d04d6ca833f363ea24db741e5d59c5e227",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:rev:1408f9d04d6ca833f363ea24db741e5d59c5e227;origin=https://github.com/gpeyre/2016-SIGGRAPH-gw/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "matlab / cvx / labelpoints / toolbox_fast_marching",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 0,
        "Dependencies score {0=NA, 1,2,3,4,5}": 3,
        "Build/configure score {0=NA, 1,2,3,4,5}": 3,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 3,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 8,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The code would be a model in term of replicability as there is one matlab file for each figure in the paper.\nTo install the code, put the toolbox_fast_marching directory and labelpoints.m inside the external folder, and for some matlab files, install the CVX toolbox, which is done easily. You may need to recompile the toolbox_fast_marching in 64bits, which can be done by running compile_mex from the toolbox folder. \n\nHowever, for the toolbox to compile, you will need to change \nint dims[3] = {n,p,q};\nto\nmwSize dims[3] = {n,p,q};\nin perform_front_propagation_3d_mex.cpp, line 86.\n\nAlso in compile_mex.m, you need to change line 7, from\nmex mex/anisotropic-fm//perform_front_propagation_anisotropic.cpp\nto\nmex mex/perform_front_propagation_anisotropic.cpp\nAlso, in perform_front_propagation_anisotropic.cpp, lines 2-3, change \n#include \"anisotropic-fm/AnisotropicTensorDistance.h\"\n#include \"anisotropic-fm/AnisotropicTensorDistanceConfidence.h\"\nto\n#include \"anisotropic-fm-feth/AnisotropicTensorDistance.h\"\n#include \"anisotropic-fm-feth/AnisotropicTensorDistanceConfidence.h\"\nand more importantly download these missing files at http://read.pudn.com/downloads144/sourcecode/windows/system/627786/toolbox_fast_marching/mex/anisotropic-fm/AnisotropicTensorDistance.h__.htm\nhttp://read.pudn.com/downloads144/sourcecode/windows/system/627786/toolbox_fast_marching/mex/anisotropic-fm/AnisotropicTensorDistanceConfidence.h__.htm\n\nBeware the version at\nhttps://gforge.inria.fr/scm/viewvc.php/gcm/src/AnisotropicTensorDistanceConfidence.h?revision=10&view=co\ndoes not contain the appropriate constructor that takes a voronoi map as input.\n\nSimilarly, the missing GenericPradosSchemesForFastMarching_3D.h , Globals.h , FastMarching_WithOptimalDynamics.h , FastMarching.h, PriorityQueue.h can be downloaded at \nhttp://read.pudn.com/downloads144/sourcecode/windows/system/627786/toolbox_fast_marching/mex/anisotropic-fm/GenericPradosSchemesForFastMarching_3D.h__.htm\nhttps://gforge.inria.fr/scm/viewvc.php/gcm/src/Globals.h?revision=10&view=co\nhttp://read.pudn.com/downloads144/sourcecode/windows/system/627786/toolbox_fast_marching/mex/anisotropic-fm/FastMarching_WithOptimalDynamics.h__.htm\nhttp://read.pudn.com/downloads144/sourcecode/windows/system/627786/toolbox_fast_marching/mex/anisotropic-fm/FastMarching.h__.htm\nand be put in the same directory.\n\n- in perform_front_propagation_anisotropic.cpp line 45, replace\nint dims[3] = {w, h, d};\nby\nmwSize dims[3] = {w, h, d};\n\n- in fm2dAniso.cpp line 15, replace\nconst int* dim_h = mxGetDimensions(prhs[0]);\nby\nconst mwSize* dim_h = mxGetDimensions(prhs[0]);\n\n- in fm2dAniso.cpp line 45:\nint dims[2] = {Nx,Ny};\nto\nmwSize dims[2] = {Nx,Ny};\n\nThe necessary \"data\" folder is only available upon request due to copyrighted materials. We did not contact authors in such cases.\nIn practice, the following codes run without data folder: generateConvexFigure, generateInitialGuessFigure2, generateTimingFigure, testGWComputation2d, testNNMF, testPartial2DMatch (out of 33 test files).\nWhen running generateMeshExampleFigure with my own .off files, I run into an \"Undefined function 'sparse' for input arguments of type 'int64') which can be solved by addin \"|| ...\n   strcmp(version,'9.4.0.813654 (R2018a)')\" in line 54 of cotLaplacian.m (or type 'version' to know your matlab version).\n\nAfter that, the code works well and results in reasonables mappings.",
        "Misc. comments": "",
        "Software language": "Matlab / Mathematica / .."
    }
]