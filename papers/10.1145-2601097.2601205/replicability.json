[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Image Completion using Planar Structure Guidance",
        "DOI": "10.1145/2601097.2601205",
        "Year": 2014,
        "ACM Keywords": [
            "Computer graphics",
            "Graphics recognition and interpretation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://www.microsoft.com/en-us/research/wp-content/uploads/2017/01/structure_completion_small.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/jbhuang0604/StructCompletion",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "25668dea193801140fafe0a722ccb1e955509ec4",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:rev:25668dea193801140fafe0a722ccb1e955509ec4;origin=https://github.com/jbhuang0604/StructCompletion/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": true,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "matlab / vlfeat / vgg / imrender / MeanShift",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 2,
        "Dependencies score {0=NA, 1,2,3,4,5}": 4,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 4,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 1,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 2,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 4,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "The current version in the repository (latest commit 25668de in Nov. 2015) has merge conflicts in sc_complete.m (<<<<<<< HEAD .... >>>>>>> 80fe71bd858652004119dc8946439915385cc282) and I am not sure why the image filename is also a parameter of the function. A 'cache' and 'result' directories need to be created in the root directory (otherwise it crashes). I also had to download binaries for VLFeat 0.9.20 at http://www.vlfeat.org/download/ since I could not compile it (this library does not seem maintained). \nThe code to detect vanishing points is not provided (the paper just refers to the classical book of Hartley and Zisserman) but instead a binary Windows executable is.\nUltimately, the code runs in about 5 min for one image in 3216x2136, or 40s in 640x480.\nHowever, it produces results that are very far from the quality of the results shown in the paper. I tried reproducing Fig 8 and obtained the results at https://pasteboard.co/ILTnRz4.jpg (images scaled and cropped to roughly match Fig. 8). I did 3 runs per image to make sure I didn't get unlucky random seeds. A note says this is a matlab reimplementation of the paper (by the paper first author), not the original code used to produce the images though. Also, a todo.txt present in the github seems to indicate there is no spatial coherence cost in this implementation, which could explain the discrepancy between advertised and obtained results, but I am not sure which term exactly this corresponds to in the paper (E_proximity?).",
        "Misc. comments": "",
        "Software language": "Matlab / Mathematica / .."
    }
]