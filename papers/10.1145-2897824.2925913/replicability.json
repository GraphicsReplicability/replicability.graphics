[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Point Registration via Efficient Convex Relaxation",
        "DOI": "10.1145/2897824.2925913",
        "Year": 2016,
        "ACM Keywords": [
            "Shape analysis"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Geometry",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "https://shaharkov.github.io/projects/ProcrustesMatchingSDP_lowres.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "http://www.wisdom.weizmann.ac.il/~itayke/assets/pm-code.zip",
        "Code URL2": "http://www.wisdom.weizmann.ac.il/~haggaim/projects/point_registration/code.zip",
        "MD5 sum (for archives)": "477BEE2C000B0E5D55BE47D73C5332B5",
        "git/hg/svn commit hash or revision number": "",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "unspecified",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Not applicable (python, Matlab..)",
        "Dependencies": "matlab",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 2,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 3,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 6,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "A few steps to make the program run on Windows+Matlab R2018a:\n- in all test files, replace\naddpath(genpath('~/mosek'))\naddpath(genpath('~/yalmip'))\nby the actual paths, e.g., \naddpath(genpath('C:\\Program Files\\Mosek\\9.1\\toolbox\\R2015a'))\naddpath(genpath('C:\\libs\\YALMIP-master'))\n\nand similarly for the toolbox_graph (downloadable at https://fr.mathworks.com/matlabcentral/fileexchange/5355-toolbox-graph ) or the FAUST data (e.g., addpath('C:\\ICCV_2015_source_code\\training\\watertight_5000') )\n\n- in interleaving.m, line 82, replace\n X_proj = reshape( intlinprog(fObj,intcon,[],[],A_ds,b_ds,lb,ub,options ), n, n );\n by\n  X_proj = reshape( intlinprog(fObj,intcon,[],[],A_ds,b_ds,lb,ub,struct(options) ), n, n );\n\n - in interleaving.m, line 97, replace \n X_proj = reshape( intlinprog(fObj,intcon,[],[],A_ds,b_ds,lb,ub,options ), n, n );\n by\n X_proj = reshape( intlinprog(fObj,intcon,[],[],A_ds,b_ds,lb,ub,struct(options) ), n, n );\n\nWhile this produces a warning, this prevents an error in Mosek's intlinprog at line 135\n  options          = mskoptimset(defaultopt,options)\n  \n- Make sure you have about 10GB of free RAM, otherwise Mosek crashes.\n- If you installed Mosek after having installed Yalmip and already run the code unsuccessfully, make sure to \"clear CACHED_SOLVERS\" otherwise Mosek won't be found by Yalmip as the available solvers are cached.\n \nThe Faust dataset is at http://faust.is.tue.mpg.de/ (though I don't think the original dataset is needed) and the iccv code has moved from web.stanford.edu/~cqf/convex to   https://cqf.io/convex/\n\nThe different tests for 'synthetic', 'faust' and 'scape' run smoothly and produce the expected matchings. I did not test the last script, testPMSDP_scapeRawScans, since it requires manually preprocessing the SCAPE dataset with the ICCV code.\n\nAnother run on Linux produced similar results.",
        "Misc. comments": "",
        "Software language": "Matlab / Mathematica / .."
    }
]