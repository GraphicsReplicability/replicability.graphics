[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Bonneel <nicolas.bonneel@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Blended cured quasi-newton for distortion optimization",
        "DOI": "10.1145/3197517.3201359",
        "Year": 2018,
        "ACM Keywords": [
            "Continuous optimization",
            "Shape modeling"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Geometry",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://dannykaufman.io/projects/BCQN/BCQN_files/paper.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "http://www.cs.columbia.edu/~kaufman/BCQN/BCQN.html",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/mike323zyf/BCQN",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "40f301e963d8b1f7f81466190578d56ec5db88cd",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:rev:40f301e963d8b1f7f81466190578d56ec5db88cd;origin=https://github.com/mike323zyf/BCQN",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "MIT",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "Other script, Not applicable (python, Matlab..)",
        "Dependencies": "Matlab / libIGL",
        "Does the software require paywall/proprietary software/material (boolean)?": true,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 0,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 4,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 4,
        "Operating system for the test": "Windows",
        "Build instructions/comments": "LibIGL has changed in the meantime (last commit at the time of the test: c645aac0c5852fad6fabe8c192fdc8675e607263). To compile, one has to edit some #include (removing #include igl/components.h in tutte_embedding_mex.cpp and adding #include igl/unique_rows.h in FastLsBuildUtils.cpp). To make it work on Windows with Visual Studio (2017), one has to edit the compileAllMex.m to add '-DWIN32' and '-D_USE_MATH_DEFINES' to the mex options.",
        "Misc. comments": "",
        "Software language": "C/C++, Matlab / Mathematica / .."
    }
]