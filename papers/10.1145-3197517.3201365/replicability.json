[
    {
        "Variant name": "main",
        "Reviewer name": "Nicolas Mellado <nmellado0@gmail.com>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Deep exemplar-based colorization",
        "DOI": "10.1145/3197517.3201365",
        "Year": 2018,
        "ACM Keywords": [
            "Computational photography",
            "Neural networks",
            "Image manipulation"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Images",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": true,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://www.dongdongchen.bid/pubs/colorization_sig18.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": true,
        "Arxiv/OAI page URL": "https://arxiv.org/abs/1807.06587",
        "Project URL": "",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/msracver/Deep-Exemplar-based-Colorization",
        "Code URL2": "",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "4aacbcc045e6435540c79d0e40fd8bccef20846d",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:rev:65e11ced75cba1fa4e3345b31cc159d631256bcf;origin=https://github.com/msracver/Deep-Exemplar-based-Colorization.git/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "MIT",
        "Are the code authors explicit? (boolean)": true,
        "Build/Configure mechanism": "IDE Project (VS,..)",
        "Dependencies": "zlib / Caffe / protobuf / protoc / boost / Glog / HDF5 / LMDB / Gflags / levelDB / Snappy / Cuda / CudNN / OpenCV / ATLAS / PyTorch / cuda",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": true,
        "Nature of the data (pretrained model, LUT...)": "Pre-trained models / Hardcoded data / lookup tables /...",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 5,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 1,
        "Operating system for the test": "Linux",
        "Build instructions/comments": "As reviewer 1, I could not build the provided Visual Studio solution (see details of my attemp below).\nHowever, it appears that the code is shipped with precompiled demos I didn't find at the first look.\nBefore running the demo, I had to install the following dependencies (tested with Python 3.6):\n>pip install image opencv-python scikit-image\nThen, to install pytorch, I followed the instructions given at https://pytorch.org/get-started/locally/, for me it was\n>pip install torch===1.4.0 torchvision===0.5.0 -f https://download.pytorch.org/whl/torch_stable.html\n\nThen you need to download and put the data as described here: https://github.com/msracver/Deep-Exemplar-based-Colorization#download-models\n\nAnd then simply run the script demo\\run.bat. It should output two colored images in demo\\examples\\res\\.\n\nCompilation attempt:\n=================\nI could however compile caffe and other dependencies using CK (https://codereef.ai/portal/c/032630d041b4fd8a:7d5e081bda47dcbc/), namely opencv, boost, gflags, glogs, hd5f, lmbd and protobuf. I had to install precompiled version of \n\n\n---- Review 2 -----\nCould not test on Windows because Caffe is unavailable for VS2017. I spent multiple hours trying to compile Caffe with VS2017, but stopped after compiling the 13th dependency, ATLAS, that compiles unix-style with cygwin. Pre-built binaries *may* be found for VS2015. Caffe is not maintained as of 2019.",
        "Misc. comments": "",
        "Software language": "C/C++, Python"
    }
]