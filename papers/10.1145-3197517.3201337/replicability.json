[
    {
        "Variant name": "main",
        "Reviewer name": "David Coeurjolly <david.coeurjolly@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Fast winding numbers for soups and clouds",
        "DOI": "10.1145/3197517.3201337",
        "Year": 2018,
        "ACM Keywords": [
            "Mesh models",
            "Point-based models",
            "Volumetric models"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Geometry",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://www.dgp.toronto.edu/projects/fast-winding-numbers/fast-winding-numbers-for-soups-and-clouds-siggraph-2018-barill-et-al.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "http://www.dgp.toronto.edu/projects/fast-winding-numbers/",
        "Code available (boolean)": true,
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Code URL": "https://github.com/GavinBarill/fast-winding-number-soups",
        "Code URL2": "https://github.com/libigl/libigl",
        "MD5 sum (for archives)": "",
        "git/hg/svn commit hash or revision number": "a2713f8513787a79bfb95c9f8a89c19345be858e",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "https://archive.softwareheritage.org/swh:1:dir:b392278ed54a694a329076de25bed97a891751b7;origin=https://github.com/GavinBarill/fast-winding-number-soups/",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Code License (if any)": "Mozilla Public License",
        "Are the code authors explicit? (boolean)": false,
        "Build/Configure mechanism": "CMakeLists",
        "Dependencies": "libigl",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 5,
        "Build/configure score {0=NA, 1,2,3,4,5}": 5,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 3,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 3,
        "Operating system for the test": "Mac OS",
        "Build instructions/comments": "The program outputs  a \".dmat\" (libigl dense matrix format) and there is no explanation. The 717 tutorial in libigl (dev branch)  provides an example of the fast triangule soup approach.\n\n\n-- Additionnal test on windows --\nTested on Windows, for both clouds and soups: CMakeFile not useful (insists on building dependencies for which I already downloaded precompiled binaries - for soups). Relatively easy to make a new Visual Studio solution (minor things to take care: _CRT_SECURE_NO_WARNINGS and _USE_MATH_DEFINES), and install several dependencies (glad, glfw, ...). Data from the paper not provided, but some examples are given. For the libIGL tutorial, it was easy to build but it was not documented that the fast winding number code was in the dev branch (not the master) and that the corresponding tutorial is tutorial 717 and not 702 (which also provides supports for winding numbers).",
        "Misc. comments": "",
        "Software language": "C/C++"
    }
]