[
    {
        "Variant name": "macOS",
        "Reviewer name": "David Coeurjolly <david.coeurjolly@liris.cnrs.fr>",
        "Is master variant (boolean)": true,
        "Is variant deprecated (boolean)": false,
        "Title": "Harmonic triangulations",
        "DOI": "10.1145/3306346.3322986",
        "Year": 2019,
        "ACM Keywords": [
            "Mesh geometry models",
            "Discrete optimization",
            "Mesh generation",
            "Computational geometry"
        ],
        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Geometry",
        "Co-authors from academia (boolean)": true,
        "Co-authors from industry (boolean)": false,
        "ACM Open Access (boolean)": false,
        "PDF on the authors' webpage / institution (boolean)": true,
        "PDF URL": "http://cybertron.cg.tu-berlin.de/~alexa/hts.pdf",
        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",
        "Project URL": "https://www.cg.tu-berlin.de/research/harmonic-triangulations/",
        "Code available (boolean)": true,
        "Code URL": "http://s000.tinyupload.com/?file_id=08995223138880152359",
        "Code URL2": "",
        "MD5 sum (for archives)": "50c53cf2d535b6ce7af04ce7e4461759",
        "MD5 sum (for archives) URL2": "",
        "git/hg/svn commit hash or revision number": "",
        "git/hg/svn commit hash or revision number URL2": "",
        "Software Heritage permalink": "",
        "If code not available, pseudo-code available (boolean)": false,
        "If pseudo-code, could the paper be trivially implemented? {0..4}": "",
        "Software type {Code, Binary, Partial Code}": "Code",
        "Software language": "C++",
        "Code License (if any)": "",
        "Are the code authors explicit? (boolean)": true,
        "Build/Configure mechanism": "none just a compilation line in the README",
        "Dependencies": "CGAL, GMP, CLI11",
        "Does the software require paywall/proprietary software/material (boolean)?": false,
        "Does the code need data (not examples) (boolean)": false,
        "Nature of the data (pretrained model, LUT...)": "",
        "License of the data": "",
        "Able to perform a replicability test (boolean)": true,
        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,
        "Documentation score {0=NA,1,2,3}": 1,
        "Dependencies score {0=NA, 1,2,3,4,5}": 4,
        "Build/configure score {0=NA, 1,2,3,4,5}": 4,
        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 5,
        "Replicate paper results score {0=NA, 1,2,3,4,5}": 2,
        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 5,
        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 2,
        "Operating system for the test": "macOS Catalina",
        "Build instructions/comments": "The zip file contains a single c++ and a README with a g++ command line instruction. To avoid build issues (the given command line does not work on my macOS Catalina), I have created a small CMakeLists.txt (after renaming the harm_simple.cp to harm_simple.cpp): \n\nproject(harmonic)\nfind_package(CGAL REQUIRED COMPONENTS Core)\nadd_executable(harm_simple harm_simple.cpp)\ntarget_link_libraries(harm_simple CGAL::CGAL  CGAL::CGAL_Core)\n\n Once compiled, I was able to produce some optimized tetrahedral meshes but I was not able to check the results (the tetview viewer does not work anymore on macOS Catalina).",
        "Misc. comments": ""
    }
]