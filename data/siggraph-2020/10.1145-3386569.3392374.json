[
    {
        "Variant name": "main",
        "Reviewer name": "David Coeurjolly <david.coeurjolly@liris.cnrs.Fr> ",

        "Is master variant (boolean)": true,
        
        "Is variant deprecated (boolean)": false,

        "Operating system for the test": "macOS",
        
        "Title": "Monte Carlo geometry processing: a grid-free approach to PDE-based methods on volumetric domains",

        "DOI": "10.1145/3386569.3392374",

        "Year": 2020,

        "ACM Keywords": [
            "Shape Analysis"
        ],

        "Topic {Rendering, Animation and Simulation, Geometry, Images, Virtual Reality, Fabrication}": "Geometry",

        "Co-authors from academia (boolean)": true,

        "Co-authors from industry (boolean)": false,

        "ACM Open Access (boolean)": true,

        "PDF on the authors' webpage / institution (boolean)": true,

        "PDF on Arxiv or any openarchive initiatives (boolean)": false,
        "Arxiv/OAI page URL": "",

        "PDF URL": "http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/paper.pdf",
        
        "Project URL": "http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/index.html",

        "Code available (boolean)": true,
        "Code URL": "http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/WoSLaplace2D.cpp.html",
        "Code URL2": "http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/WoSPoisson2D.cpp.html",
        "MD5 sum (for archives)": "67657f1e1e644306f5c13877b5719694",
        "MD5 sum (for archives) URL2": "0c062fa8480038de6a3b82d4caf08c10",
        "git/hg/svn commit hash or revision number": "",
        "git/hg/svn commit hash or revision number URL2": "",

        "Software Heritage permalink": "",
       

        "If code not available, pseudo-code available (boolean)": false,
        
        "If pseudo-code, could the paper be trivially implemented? {0..4}": 0,

        "Software type {Code, Binary, Partial Code}": "Partial Code",

        "Software language": "c++",
        
        "Code License (if any)": "",

        "Are the code authors explicit? (boolean)": false,

        "Build/Configure mechanism": "none",

        "Dependencies": "",
        
        "Does the software require paywall/proprietary software/material (boolean)?": false,

        "Does the code need data (not examples) (boolean)": false,
        
        "Nature of the data (pretrained model, LUT...)": "",

        "License of the data": "",

        "Able to perform a replicability test (boolean)": false,

        "If not able to perform a test, was it due to missing hardware/software? (boolean)": false,

        "Documentation score {0=NA,1,2,3}": 2,

        "Dependencies score {0=NA, 1,2,3,4,5}": 5,

        "Build/configure score {0=NA, 1,2,3,4,5}": 5,

        "Fixing bugs score (if any) {0=NA, 1,2,3,4,5}": 0,

        "Replicate paper results score {0=NA, 1,2,3,4,5}": 4,

        "Adaptability score to other contexts {0=NA, 1,2,3,4,5}": 4,

        "Time spent for the test (code download to first successful run, [0,10], 10min slots, 100min max)": 2,

        "Build instructions/comments": "The authors provide two 'quick and dirty/naive' c++ version of their Monte-Carlo PDE solver (Laplace and Poisson problems). The codes build and run perfectly outputing some CSV 2D map that must be converted to an image to 'visualize' the output. Per se, the provided code can only partially reproduce some paper results but interested readers should be able to quickly reimplement the core contributions of the paper (see Misc. comments). Some applications mentionned in the paper may require additional efforts (VF, Helmholtz Decomposition and Shape Deformation).",

        "Misc. comments": "In the project page, the authors also provide links to many shadertoy scripts that reproduce some paper results (scripts not from the authors)."
    }
]
